package com.nightcat;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Date;
import java.util.Properties;

import javax.mail.Authenticator;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.security.auth.callback.ConfirmationCallback;
import javax.sql.DataSource;

import org.springframework.mail.javamail.JavaMailSenderImpl;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.mysql.fabric.xmlrpc.base.Data;

import org.springframework.ui.ModelMap;
@Controller
public class UserController{ 
	// 发件人的 邮箱 和 授权码
	public static String myEmailAccount = "1281634537@qq.com";
	public static String myEmailPassword = "euuhemixpumabace";
	
	// 发件人邮箱的 SMTP 服务器地址
	public static String myEmailSMTPHost = "smtp.qq.com";
	
	// 收件人邮箱
	//public static String receiveMailAccount = "710889210@qq.com";
	
   
   @RequestMapping("/showLogin")
   public String showLogin(ModelMap model) {
      return "login";
   }
   
   @RequestMapping("/showRegister")
   public String showRegister(ModelMap model) {
      return "register";
   }
   
   @RequestMapping(value="/login",method = RequestMethod.POST)
   public String login(String name,String password,ModelMap model) {
		Context context;
		try {
			context = new InitialContext();
			DataSource ds = (DataSource) context.lookup("java:comp/env/jdbc/bitcandy");
			Connection conn = ds.getConnection();
			PreparedStatement psttm = conn.prepareStatement("select * from bitcandy.user where email=?");
			psttm.setString(1, name);
			ResultSet resultSet = psttm.executeQuery();
			if(!resultSet.next()) {
				model.addAttribute("message", "没有"+"'"+name+"'这个用户");
				return "no";
			}else {
				String sqlPassword = resultSet.getString("password");
				if(sqlPassword.equals(password)) {
					if(resultSet.getInt("email_activated") == 1) {
						model.addAttribute("name", name);
						model.addAttribute("password", password);
						return "index";
					}else {
						model.addAttribute("message", "您的账号还没有激活");
						return "no";
					}	
				}else {
					model.addAttribute("message", "密码错误");
					return "no";
				}
			}
		} catch (NamingException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}

	   return null;
   }
   
   @RequestMapping(value="/confirm",method = RequestMethod.GET)
   public String Confirm(String email,ModelMap model) {
		Context context;
		try {
			context = new InitialContext();
			DataSource ds = (DataSource) context.lookup("java:comp/env/jdbc/bitcandy");
			Connection conn = ds.getConnection();
			PreparedStatement psttm = conn.prepareStatement("UPDATE `bitcandy`.`user` SET `email_activated`='1' WHERE `email`=?");
			psttm.setString(1, email);
			int resultCode = psttm.executeUpdate();
			if(resultCode != 0) {
				model.addAttribute("message", "您的账号已经成功激活");
				return "ok";
			}else {
				model.addAttribute("message", "激活失败");
				return "no";
			}
		} catch (NamingException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
   }
   
   @RequestMapping(value="/register",method = RequestMethod.POST)
   public String register(String name,String password,ModelMap model) {
		Context context;

			try {
				context = new InitialContext();
				DataSource ds = (DataSource) context.lookup("java:comp/env/jdbc/bitcandy");
				Connection conn = ds.getConnection();
				PreparedStatement psttm = conn.prepareStatement("select * from bitcandy.user where email=?");
				psttm.setString(1, name);
				ResultSet resultSet = psttm.executeQuery();
				if(resultSet.next()) {
					model.addAttribute("message", "已存在"+"'"+name+"'这个用户");
					return "no";
				}else {
					//INSERT INTO `bitcandy`.`user` (`email`, `password`, `regist_time`) VALUES ('123@qq.com', '123', 'now()');
					PreparedStatement psttm2 = conn.prepareStatement("INSERT INTO `bitcandy`.`user` (`email`, `password`, `regist_time`) VALUES (?, ?, now())");
					psttm2.setString(1, name);
					psttm2.setString(2, password);
					psttm2.execute();
						
					//发送验证邮件
					// 1. 创建参数配置, 用于连接邮件服务器的参数配置
				    Properties props = new Properties();                    // 参数配置
				    props.setProperty("mail.transport.protocol", "smtp");   // 使用的协议（JavaMail规范要求）
				    props.setProperty("mail.smtp.host", myEmailSMTPHost);   // 发件人的邮箱的 SMTP 服务器地址
				    props.setProperty("mail.smtp.auth", "true");            // 需要请求认证
			
				    // SMTP 连接使用 SSL 安全认证
				    final String smtpPort = "465";
				    props.setProperty("mail.smtp.port", smtpPort);
				    props.setProperty("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory");
				    props.setProperty("mail.smtp.socketFactory.fallback", "false");
				    props.setProperty("mail.smtp.socketFactory.port", smtpPort);

			
				    // 2. 根据配置创建会话对象, 用于和邮件服务器交互
				    Session session = Session.getInstance(props);
				    session.setDebug(true);                                 // 设置为debug模式, 可以查看详细的发送 log
			
				    // 3. 创建一封邮件
				    String url = "http://localhost:8080/BitCandy/confirm?email="+name;		//创建验证url
				    MimeMessage message = createMimeMessage(session, myEmailAccount, name,url);
			
				    // 4. 根据 Session 获取邮件传输对象
				    Transport transport = session.getTransport();
			
				    transport.connect(myEmailAccount, myEmailPassword);
			
				    // 6. 发送邮件, 发到所有的收件地址, message.getAllRecipients() 获取到的是在创建邮件对象时添加的所有收件人, 抄送人, 密送人
				    transport.sendMessage(message, message.getAllRecipients());
			
				    // 7. 关闭连接
				    transport.close();
				}
			}
			 catch (NamingException e) {
				e.printStackTrace();
			} catch (SQLException e) {
				e.printStackTrace();
			} catch (MessagingException e) {
				e.printStackTrace();
			} catch (Exception e) {
				e.printStackTrace();
			}
		return null;
   }
   
   /**
    * 创建一封只包含文本的简单邮件
    *
    * @param session 和服务器交互的会话
    * @param sendMail 发件人邮箱
    * @param receiveMail 收件人邮箱
    * @return
    * @throws Exception
    */
   public static MimeMessage createMimeMessage(Session session, String sendMail, String receiveMail,String url) throws Exception {
       // 1. 创建一封邮件
       MimeMessage message = new MimeMessage(session);

       // 2. From: 发件人（昵称有广告嫌疑，避免被邮件服务器误认为是滥发广告以至返回失败，请修改昵称）
       message.setFrom(new InternetAddress(sendMail, "BitCandy", "UTF-8"));

       // 3. To: 收件人（可以增加多个收件人、抄送、密送）
       message.setRecipient(MimeMessage.RecipientType.TO, new InternetAddress(receiveMail, "BitCandy用户", "UTF-8"));

       // 4. Subject: 邮件主题（标题有广告嫌疑，避免被邮件服务器误认为是滥发广告以至返回失败，请修改标题）
       message.setSubject("BitCandy邮箱验证", "UTF-8");

       // 5. Content: 邮件正文（可以使用html标签）（内容有广告嫌疑，避免被邮件服务器误认为是滥发广告以至返回失败，请修改发送内容）
       message.setContent("BitCandy用户你好, 点击下列地址激活您的账号："+url, "text/html;charset=UTF-8");

       // 6. 设置发件时间
       message.setSentDate(new Date());

       // 7. 保存设置
       message.saveChanges();

       return message;
   }
   
}